{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 120000,\n  // 2 minutes for document processing\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🔄 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('❌ API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`✅ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('❌ API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Document processing API\nexport const documentAPI = {\n  // Process a single document\n  processDocument: async fileData => {\n    const response = await api.post('/process-document', fileData);\n    return response.data;\n  },\n  // Process document from S3\n  processS3Document: async (s3Key, bucketName = null) => {\n    const response = await api.post('/process-s3-document', {\n      s3_key: s3Key,\n      bucket_name: bucketName,\n      document_type: 'invoice'\n    });\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\n// Chat API\nexport const chatAPI = {\n  // Create a new chat session with invoice data\n  createSession: async invoices => {\n    const response = await api.post('/create-session', {\n      invoices: invoices\n    });\n    return response.data;\n  },\n  // Send a chat message\n  sendMessage: async (sessionId, message) => {\n    const response = await api.post('/chat', {\n      session_id: sessionId,\n      message: message\n    });\n    return response.data;\n  },\n  // Get session status\n  getSessionStatus: async sessionId => {\n    const response = await api.get(`/session/${sessionId}/status`);\n    return response.data;\n  },\n  // Delete a session\n  deleteSession: async sessionId => {\n    const response = await api.delete(`/session/${sessionId}`);\n    return response.data;\n  },\n  // Get session statistics\n  getSessionStats: async () => {\n    const response = await api.get('/sessions/stats');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","message","documentAPI","processDocument","fileData","post","processS3Document","s3Key","bucketName","s3_key","bucket_name","document_type","healthCheck","get","chatAPI","createSession","invoices","sendMessage","sessionId","session_id","getSessionStatus","deleteSession","delete","getSessionStats"],"sources":["/Users/noahgallego/Desktop/invoiceable-main/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 120000, // 2 minutes for document processing\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`🔄 API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('❌ API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`✅ API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('❌ API Response Error:', error.response?.status, error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Document processing API\nexport const documentAPI = {\n  // Process a single document\n  processDocument: async (fileData) => {\n    const response = await api.post('/process-document', fileData);\n    return response.data;\n  },\n\n  // Process document from S3\n  processS3Document: async (s3Key, bucketName = null) => {\n    const response = await api.post('/process-s3-document', {\n      s3_key: s3Key,\n      bucket_name: bucketName,\n      document_type: 'invoice'\n    });\n    return response.data;\n  },\n\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\n// Chat API\nexport const chatAPI = {\n  // Create a new chat session with invoice data\n  createSession: async (invoices) => {\n    const response = await api.post('/create-session', {\n      invoices: invoices\n    });\n    return response.data;\n  },\n\n  // Send a chat message\n  sendMessage: async (sessionId, message) => {\n    const response = await api.post('/chat', {\n      session_id: sessionId,\n      message: message\n    });\n    return response.data;\n  },\n\n  // Get session status\n  getSessionStatus: async (sessionId) => {\n    const response = await api.get(`/session/${sessionId}/status`);\n    return response.data;\n  },\n\n  // Delete a session\n  deleteSession: async (sessionId) => {\n    const response = await api.delete(`/session/${sessionId}`);\n    return response.data;\n  },\n\n  // Get session statistics\n  getSessionStats: async () => {\n    const response = await api.get('/sessions/stats');\n    return response.data;\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}