{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 300000,\n  // 5 minutes for large file processing\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add any auth headers here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Handle common errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 413) {\n    throw new Error('File too large. Please try a smaller file.');\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n    throw new Error('Too many requests. Please wait and try again.');\n  }\n  if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout. The file may be too large or complex to process.');\n  }\n  return Promise.reject(error);\n});\nexport const documentAPI = {\n  // Process a document via direct upload\n  processDocument: async (fileData, fileName, documentType = 'invoice') => {\n    const response = await api.post('/process-document', {\n      file_data: fileData,\n      file_name: fileName,\n      document_type: documentType\n    });\n    return response.data;\n  },\n  // Process a document from S3\n  processS3Document: async (s3Key, bucketName, documentType = 'invoice') => {\n    const response = await api.post('/process-document', {\n      s3_key: s3Key,\n      bucket_name: bucketName,\n      document_type: documentType\n    });\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","_error$response","_error$response2","status","Error","code","documentAPI","processDocument","fileData","fileName","documentType","post","file_data","file_name","document_type","data","processS3Document","s3Key","bucketName","s3_key","bucket_name","healthCheck","get"],"sources":["/Users/noahgallego/Desktop/invoiceable-main/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 300000, // 5 minutes for large file processing\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Add any auth headers here if needed\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle common errors\n    if (error.response?.status === 413) {\n      throw new Error('File too large. Please try a smaller file.');\n    }\n    if (error.response?.status === 429) {\n      throw new Error('Too many requests. Please wait and try again.');\n    }\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timeout. The file may be too large or complex to process.');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const documentAPI = {\n  // Process a document via direct upload\n  processDocument: async (fileData, fileName, documentType = 'invoice') => {\n    const response = await api.post('/process-document', {\n      file_data: fileData,\n      file_name: fileName,\n      document_type: documentType\n    });\n    return response.data;\n  },\n\n  // Process a document from S3\n  processS3Document: async (s3Key, bucketName, documentType = 'invoice') => {\n    const response = await api.post('/process-document', {\n      s3_key: s3Key,\n      bucket_name: bucketName,\n      document_type: documentType\n    });\n    return response.data;\n  },\n\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACQ,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACT;EACA,IAAI,EAAAD,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IAClC,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,IAAI,EAAAF,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,IAAIP,KAAK,CAACQ,IAAI,KAAK,cAAc,EAAE;IACjC,MAAM,IAAID,KAAK,CAAC,mEAAmE,CAAC;EACtF;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG;EACzB;EACAC,eAAe,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,YAAY,GAAG,SAAS,KAAK;IACvE,MAAMV,QAAQ,GAAG,MAAMf,GAAG,CAAC0B,IAAI,CAAC,mBAAmB,EAAE;MACnDC,SAAS,EAAEJ,QAAQ;MACnBK,SAAS,EAAEJ,QAAQ;MACnBK,aAAa,EAAEJ;IACjB,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACe,IAAI;EACtB,CAAC;EAED;EACAC,iBAAiB,EAAE,MAAAA,CAAOC,KAAK,EAAEC,UAAU,EAAER,YAAY,GAAG,SAAS,KAAK;IACxE,MAAMV,QAAQ,GAAG,MAAMf,GAAG,CAAC0B,IAAI,CAAC,mBAAmB,EAAE;MACnDQ,MAAM,EAAEF,KAAK;MACbG,WAAW,EAAEF,UAAU;MACvBJ,aAAa,EAAEJ;IACjB,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACe,IAAI;EACtB,CAAC;EAED;EACAM,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMrB,QAAQ,GAAG,MAAMf,GAAG,CAACqC,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOtB,QAAQ,CAACe,IAAI;EACtB;AACF,CAAC;AAED,eAAe9B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}